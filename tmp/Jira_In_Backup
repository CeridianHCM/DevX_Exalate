if(firstSync){
    def apMap = ["SharpTop\\_Demo\\ST\\Platform\\Accessibility":"AC",
             "SharpTop\\_Demo\\ST\\Clocks\\Clocks - Continuous Improvement":"CCI"]
             
    def typeMapping = ["Task":"Sub-task",
                    "PBI":"Story",
                    "Feature":"Epic"]
             
   issue.projectKey   =  apMap[replica.project.areaPath]
   // Set type name from source issue, if not found set a default
   issue.typeName     = nodeHelper.getIssueType(typeMapping[replica.type?.name], issue.projectKey)?.name ?: "Story"
}

if(issue.typeName == "PBI" ){
    def statusMapping = ["New":"Draft",
                        "Approved":"Open",
                        "Committed":"In Progress",
                        "ReadyQA":"In Progress",
                        "Done":"Done",
                        "Removed":"Cancelled"]
    issue.status = statusMapping[replica.status]
}





issue.summary      = replica.summary
issue.description  = replica.description
issue.comments     = commentHelper.mergeComments(issue, replica)
issue.attachments  = attachmentHelper.mergeAttachments(issue, replica)
issue.labels       = replica.labels

/*
User Synchronization (Assignee/Reporter)

Set a Reporter/Assignee from the source side, if the user can't be found set a default user
You can use this approach for custom fields of type User
def defaultUser = nodeHelper.getUserByEmail("default@idalko.com")
issue.reporter = nodeHelper.getUserByEmail(replica.reporter?.email) ?: defaultUser
issue.assignee = nodeHelper.getUserByEmail(replica.assignee?.email) ?: defaultUser
*/

/*
Comment Synchronization

Sync comments with the original author if the user exists in the local instance
Remove original Comments sync line if you are using this approach
issue.comments = commentHelper.mergeComments(issue, replica){ it.executor = nodeHelper.getUserByEmail(it.author?.email) }
*/

/*
Status Synchronization

Sync status according to the mapping [remote issue status: local issue status]
If statuses are the same on both sides don't include them in the mapping
def statusMapping = ["Open":"New", "To Do":"Backlog"]
def remoteStatusName = replica.status.name
issue.setStatus(statusMapping[remoteStatusName] ?: remoteStatusName)
*/

/*
Custom Fields

This line will sync Text, Option(s), Number, Date, Organization, and Labels CFs
For other types of CF check documentation
issue.customFields."CF Name".value = replica.customFields."CF Name".value
*/
